import threading
from datetime import datetime, timedelta
import pytz
import sqlite3
from telebot.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

import schedule
import time
from ..loader import bot


def get_cursor():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    return conn, cursor


@bot.callback_query_handler(func=lambda call: call.data == 'continueafteremiind')
def test_state(call: CallbackQuery):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    conn, cursor = get_cursor()
    cursor.execute("SELECT last_bot_message_id, last_bot_message_type FROM Users WHERE user_id = ?", [user_id])
    result = cursor.fetchone()
    mess_id = result[0]
    message_type = result[1]

    if mess_id:
        if message_type == 'voice':
            markup = InlineKeyboardMarkup()
            button1 = InlineKeyboardButton(text='–ü–æ–≥–Ω–∞–ª–∏!', callback_data='Go!')
            markup.add(button1)
            bot.copy_message(chat_id, chat_id, mess_id, reply_markup=markup)
        else:
            bot.copy_message(chat_id, chat_id, mess_id)
    else:
        bot.send_message(chat_id, f"–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")


def check_unfinished_users():
    conn, cursor = get_cursor()
    now = datetime.now()

    cursor.execute('SELECT user_id, last_interaction_time, notified FROM Users WHERE phone IS NULL')
    for user_id, last_interaction_time, notified in cursor.fetchall():
        if last_interaction_time is not None:
            last_interaction_time = datetime.strptime(last_interaction_time, '%Y-%m-%d %H:%M:%S')
            if (now - last_interaction_time > timedelta(minutes=1) and notified == 0) or \
                (now - last_interaction_time > timedelta(minutes=2) and notified == 1):
                markup = InlineKeyboardMarkup()
                button1 = InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å!', callback_data='continueafteremiind')
                markup.add(button1)
                if now - last_interaction_time > timedelta(minutes=1) and notified == 0:
                    bot.send_photo(chat_id=user_id,
                                   photo='AgACAgIAAxkBAAIFW2SIT8pWmSQ1c4E4Z5TwjaDxq2Zj'
                                         'AAISyzEbAbtBSA3q6SoUypqdAQADAgADeQADLwQ',
                                   caption="*–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è –≤—ã –æ—Ç–≤–ª–µ–∫–ª–∏—Å—å...*\n\n"
                                           "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—Éüëá",
                                   reply_markup=markup, parse_mode='Markdown')
                else:
                    bot.send_photo(chat_id=user_id,
                                   photo='AgACAgIAAxkBAAIFXmSIUFoYlDmJESFWBsudFJiZg6'
                                         'qMAAIUyzEbAbtBSJV_98GyLvqyAQADAgADeQADLwQ',
                                   caption="üìû *–í—ã –∑–¥–µ—Å—å?* –ù–µ —Å—Ç–∞–ª–∞ –≤–∞—Å –æ—Ç–≤–ª–µ–∫–∞—Ç—å, –ø–æ–¥—É–º–∞–ª–∞ —á—Ç–æ –≤—ã –∑–∞–Ω—è—Ç—ã...\n\n"
                                           "–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É –¥–æ –∫–æ–Ω—Ü–∞, –∞ –∑–∞—è–≤–∫–∏ –ò–±—Ä–∞—Ç –ø–æ–ª—É—á–∏—Ç "
                                           "*–ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤.*\n\n–ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –¥–æ –∫–æ–Ω—Ü–∞, "
                                           "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá",
                                   reply_markup=markup, parse_mode='Markdown')
                cursor.execute('UPDATE Users SET last_interaction_time = ?, '
                               'notified = ? WHERE user_id = ?',
                               [now.strftime('%Y-%m-%d %H:%M:%S'), notified + 1, user_id])

    cursor.execute('SELECT user_id, last_interaction_time, notified FROM Users WHERE phone IS NOT NULL')
    for user_id, last_interaction_time, notified in cursor.fetchall():
        if last_interaction_time is not None:
            last_interaction_time = datetime.strptime(last_interaction_time, '%Y-%m-%d %H:%M:%S')
            if (now - last_interaction_time > timedelta(minutes=1) and notified == 0) or \
                (now - last_interaction_time > timedelta(minutes=2) and notified == 1):
                markup = InlineKeyboardMarkup()
                button1 = InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å!', callback_data='continueafteremiind')
                markup.add(button1)
                if now - last_interaction_time > timedelta(minutes=1) and notified == 0:
                    bot.send_photo(chat_id=user_id,
                                   photo='AgACAgIAAxkBAAIFW2SIT8pWmSQ1c4E4Z5TwjaDxq2Zj'
                                         'AAISyzEbAbtBSA3q6SoUypqdAQADAgADeQADLwQ',
                                   caption="*–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è –≤—ã –æ—Ç–≤–ª–µ–∫–ª–∏—Å—å...*\n\n"
                                           "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—Éüëá",
                                   reply_markup=markup, parse_mode='Markdown')
                else:
                    cursor.execute('SELECT username, name, phone FROM Users WHERE user_id = ?', [user_id,])
                    user_data = cursor.fetchone()
                    print(user_data)
                    '''('Grasmurr', '—Ö–µ–ª–æ—É', '79670282821')
                    (None, '—Ö–µ–ª–æ—É', '79774563501')'''
                    username = user_data[0] if user_data[0] is not None else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    text = f"üßæ –ë–æ—Å—Å! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ—à–µ–ª –¥–æ –∫–æ–Ω—Ü–∞:\n\n" \
                           f"*–ò–º—è:* {user_data[1]}\n" \
                           f"*–¢–µ–ª–µ—Ñ–æ–Ω:* +{user_data[2]}\n" \
                           f"*Username:* @{username}" \
                           f"\n\n–†–∞–¥–∞ –±—ã–ª–∞ –ø–æ–º–æ—á—å!\n–° –ª—é–±–æ–≤—å—é, –õ–∏–∑–∞‚ù£Ô∏è"
                    bot.send_message(chat_id=305378717, text=text, parse_mode='Markdown')
                cursor.execute('UPDATE Users SET last_interaction_time = ?, '
                               'notified = ? WHERE user_id = ?',
                               [now.strftime('%Y-%m-%d %H:%M:%S'), notified + 1, user_id])
    conn.commit()


# def check_phoneless_users():
#     conn, cursor = get_cursor()
#     if datetime.now().weekday() == 0:
#         cursor.execute('SELECT user_id FROM Users WHERE phone IS NULL')
#         for user_id in cursor.fetchall():
#             bot.send_message(user_id[0],
#                              "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. "
#                              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∞–Ω–∫–µ—Ç–µ.")


schedule.every(1).minutes.do(check_unfinished_users)
# schedule.every().monday.do(check_phoneless_users)


def run_scheduler():
    while True:
        try:
            schedule.run_pending()
        except Exception as e:
            bot.send_message(305378717, f"–û—à–∏–±–∫–∞: {e}")
        time.sleep(1)




scheduler_thread = threading.Thread(target=run_scheduler)
