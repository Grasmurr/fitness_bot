from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, CallbackQuery
from telebot import custom_filters
from django.utils import timezone
from telebot import types
import re
import requests
import json
import csv
from collections import Counter

from .edit_calories_backends import create_calories_menu, \
    create_calories_add_or_remove_menu, return_calories_and_norm, get_id, \
    create_main_editing_menu, get_meal_info_text, create_keyboard_markup, meal_info, check_correctness, \
    update_courseday_calories, update_meal, one_five_markup, redact_menu_markup
from ...loader import bot
from ...states import States, CourseInteraction
from ...models import PaidUser, UnpaidUser, CourseDay, Meal
from ..mainmenu import paid_user_main_menu

user_data = {}

for_meal_from_user = {}


@bot.message_handler(state=CourseInteraction.initial, func=lambda message: message.text == '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –∫–∞–ª–æ—Ä–∏–π üìÜ')
def handle_update_calories(message: Message):
    try:
        user_id, chat_id = get_id(message=message)

        user = PaidUser.objects.get(user=user_id)
        current_day = (timezone.now().date() - user.paid_day).days

        if current_day == 0:
            bot.send_message(user_id, '–ö—É—Ä—Å –Ω–∞—á–Ω–µ—Ç—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è! '
                                      '–ü–æ—ç—Ç–æ–º—É –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è')

        elif 0 < current_day < 22:
            text, markup = create_main_editing_menu(user, current_day)
            bot.send_message(user_id, text, reply_markup=markup, parse_mode='Markdown')

        else:
            bot.send_message(user_id, '–ö–∞–∂–µ—Ç—Å—è, –∫—É—Ä—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!')
    except Exception as E:
        bot.send_message(305378717, f"–û—à–∏–±–∫–∞ {E}")


@bot.callback_query_handler(state=CourseInteraction.initial,
                            func=lambda call: call.data in ["breakfast", "lunch", "dinner", "snack", "progress"])
def handle_meal_callback(call):
    user_id, chat_id = get_id(call=call)
    meal = call.data
    user = PaidUser.objects.get(user=user_id)
    current_day = (timezone.now().date() - user.paid_day).days

    if user_id not in user_data:
        user_data[user_id] = {current_day: {}}
    if meal not in user_data[user_id][current_day]:
        user_data[user_id][current_day][meal] = {}
    user_data[user_id][current_day]['selected_meal'] = meal

    text, markup = meal_info(user, current_day, user_data, user_id, meal)

    bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=markup)


@bot.callback_query_handler(state=CourseInteraction.initial, func=lambda call: call.data == 'back')
def back_to_menu(call: CallbackQuery):
    user_id, chat_id = get_id(call=call)
    user = PaidUser.objects.get(user=user_id)
    current_day = (timezone.now().date() - user.paid_day).days
    text, markup = create_main_editing_menu(user, current_day)
    bot.edit_message_text(chat_id=chat_id, text=text, message_id=call.message.message_id,
                          reply_markup=markup, parse_mode='Markdown')


@bot.callback_query_handler(state=CourseInteraction.initial, func=lambda call: call.data == 'add_remove')
def handle_add_remove_callback(call):
    user_id, chat_id = get_id(call=call)

    markup = create_keyboard_markup('–û—Ç–º–µ–Ω–∞!')

    text = "–î–ª—è –Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞"

    bot.edit_message_text(text=text, chat_id=chat_id,
                          message_id=call.message.message_id, reply_markup=None)
    bot.send_message(user_id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: ', reply_markup=markup)
    bot.set_state(user_id, CourseInteraction.enter_meal_name, chat_id)


@bot.message_handler(state=CourseInteraction.enter_meal_name, content_types=['text'])
def handle_entered_meal_name(message: Message):
    user_id, chat_id = get_id(message=message)
    answer = message.text
    if answer == '–û—Ç–º–µ–Ω–∞!':
        bot.send_message(text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞.", chat_id=chat_id)
        paid_user_main_menu(message)
        bot.set_state(user_id, CourseInteraction.initial, chat_id)
    else:
        if user_id not in for_meal_from_user:
            for_meal_from_user[user_id] = {}
        for_meal_from_user[user_id]['name'] = answer
        markup = create_keyboard_markup('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å', '–û—Ç–º–µ–Ω–∞!')
        bot.send_message(user_id, f'–•–æ—Ä–æ—à–æ! –í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ "{answer}". –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å, '
                                  f'–∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å?', reply_markup=markup)
        bot.set_state(user_id, CourseInteraction.continue_meal_name, chat_id)


@bot.message_handler(state=CourseInteraction.continue_meal_name, content_types=['text'])
def handle_meal_name(message: Message):
    user_id, chat_id = get_id(message=message)
    answer = message.text
    if answer == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        bot.send_message(user_id, '–•–æ—Ä–æ—à–æ! –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –±–ª—é–¥–∞.', reply_markup=ReplyKeyboardRemove())
        bot.set_state(user_id, CourseInteraction.enter_meal_calories, chat_id)
    elif answer == '–ò–∑–º–µ–Ω–∏—Ç—å':
        markup = create_keyboard_markup('–û—Ç–º–µ–Ω–∞!')
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:', reply_markup=markup)
        bot.set_state(user_id, CourseInteraction.enter_meal_name, chat_id)
    else:
        bot.send_message(text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞.", chat_id=chat_id)
        paid_user_main_menu(message)
        bot.set_state(user_id, CourseInteraction.initial, chat_id)


@bot.message_handler(state=CourseInteraction.enter_meal_calories, content_types=['text'])
def handle_meal_calories(message: Message):
    user_id, chat_id = get_id(message=message)
    answer = message.text
    if answer.isdigit() and 0 < int(answer) < 5000:
        for_meal_from_user[user_id]['calories'] = answer
        bot.send_message(user_id, '–•–æ—Ä–æ—à–æ! –ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:')
        bot.set_state(user_id, CourseInteraction.enter_meal_protein, chat_id)
    else:
        bot.send_message(user_id, '–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


@bot.message_handler(state=CourseInteraction.enter_meal_protein, content_types=['text'])
def handle_meal_calories(message: Message):
    user_id, chat_id = get_id(message=message)
    answer = message.text
    if answer.isdigit() and 0 < int(answer) < 5000:
        for_meal_from_user[user_id]['proteins'] = answer
        user = PaidUser.objects.get(user=user_id)
        current_day = (timezone.now().date() - user.paid_day).days

        bot.send_message(user_id, '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!')
        paid_user_main_menu(message)

        user_data[user_id][current_day][user_data[user_id][current_day]['selected_meal']][
            f"{for_meal_from_user[user_id]['name']}"] = f"{for_meal_from_user[user_id]['calories']} " \
                                                        f"–∫–∫–∞–ª {for_meal_from_user[user_id]['proteins']}–≥ –±–µ–ª–∫–æ–≤"

        course_day, created = CourseDay.objects.get_or_create(user=user, day=current_day)
        meal, _ = Meal.objects.get_or_create(course_day=course_day,
                                             meal_type=user_data[user_id][current_day]['selected_meal'])
        update_meal(meal,
                    int(for_meal_from_user[user_id]['calories']),  # –∫–∞–ª–æ—Ä–∏–∏
                    int(for_meal_from_user[user_id]['proteins']))

        update_courseday_calories(course_day)

        text, markup = meal_info(user, current_day, user_data, user_id,
                                 user_data[user_id][current_day]['selected_meal'])
        bot.send_message(text=text, chat_id=chat_id, reply_markup=markup)
        bot.set_state(user_id, CourseInteraction.initial, chat_id)

    else:
        bot.send_message(user_id, '–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


@bot.callback_query_handler(state=CourseInteraction.initial, func=lambda call: call.data == 'redact')
def redact_entered_meals(call: CallbackQuery):
    user_id, chat_id = get_id(call=call)
    user = PaidUser.objects.get(user=user_id)
    current_day = (timezone.now().date() - user.paid_day).days

    user_calories, remaining_calories, daily_norm, daily_proteins_norm, \
        remaining_proteins = return_calories_and_norm(user, current_day)

    text, meals_text = get_meal_info_text(user_data[user_id][current_day]['selected_meal'],
                                          user_calories['breakfast'], user_data[user_id][current_day][
                                              user_data[user_id][current_day]['selected_meal']])
    if meals_text != '–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏!':

        to_send = ''
        oo = meals_text.split("\n")
        markup = redact_menu_markup(len(oo) - 1)
        user_data[user_id][current_day]['variants_to_delete'] = {}
        for i in range(1, len(oo)):
            to_send += f'{i} {oo[i - 1]}\n'
            user_data[user_id][current_day]['variants_to_delete'][i] = oo[i - 1]

        bot.edit_message_text(message_id=call.message.message_id, chat_id=chat_id,
                              text=f'–•–æ—Ä–æ—à–æ! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: \n\n{to_send}',
                              reply_markup=markup)
    else:
        markup = InlineKeyboardMarkup()
        button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
        markup.add(button)
        bot.edit_message_text(message_id=call.message.message_id, chat_id=chat_id,
                              text=f'–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏!',
                              reply_markup=markup)
    bot.set_state(user_id, CourseInteraction.redacting, chat_id)


@bot.callback_query_handler(state=CourseInteraction.redacting,
                            func=lambda call: call.data)
def handle_redacting(call: CallbackQuery):
    user_id, chat_id = get_id(call=call)

    if call.data.isdigit():
        user = PaidUser.objects.get(user=user_id)
        current_day = (timezone.now().date() - user.paid_day).days
        user_data[user_id][current_day]['selected_meal_to_delete'] = int(call.data)
        markup = InlineKeyboardMarkup()
        button = InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='delete')
        button1 = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
        markup.add(button)
        markup.add(button1)
        bot.edit_message_text(chat_id=chat_id, text='–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ?',
                              message_id=call.message.message_id, reply_markup=markup)

        bot.set_state(user_id, CourseInteraction.delete_product, chat_id)

    else:
        user = PaidUser.objects.get(user=user_id)
        current_day = (timezone.now().date() - user.paid_day).days

        text, markup = meal_info(user, current_day, user_data, user_id,
                                 user_data[user_id][current_day]['selected_meal'])

        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=markup)
        bot.set_state(user_id, CourseInteraction.initial, chat_id)


@bot.callback_query_handler(state=CourseInteraction.delete_product, func=lambda call: call.data)
def delete_or_not_product(call: CallbackQuery):
    user_id, chat_id = get_id(call=call)
    answer = call.data
    if answer == 'back':
        redact_entered_meals(call)
    else:
        user = PaidUser.objects.get(user=user_id)
        current_day = (timezone.now().date() - user.paid_day).days

        text, markup = meal_info(user, current_day, user_data, user_id,
                                 user_data[user_id][current_day]['selected_meal'])

        keyboard_markup = create_keyboard_markup('–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üéæ', '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –∫–∞–ª–æ—Ä–∏–π üìÜ',
                                        '–°–∫–æ–ª—å–∫–æ –µ—â–µ –º–æ–∂–Ω–æ –∫–∫–∞–ª?üëÄ', '–ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å–∏–∫–∏...')

        bot.send_message(user_id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard_markup)



        selected_to_delete = user_data[user_id][current_day]['variants_to_delete'][user_data[user_id][current_day]['selected_meal_to_delete']]

        user_data[user_id][current_day][user_data[user_id][current_day]['selected_meal']].pop(selected_to_delete, None)
        bot.send_message(user_id, text=f'{selected_to_delete} - {user_data[user_id][current_day][user_data[user_id][current_day]["selected_meal"]]}')
        bot.edit_message_text('—É–¥–∞–ª–µ–Ω–æ!', chat_id, call.message.message_id, reply_markup=None)
        bot.set_state(user_id, CourseInteraction.initial, chat_id)






# def search_product(product_name):
#     return ['–ú–æ—Ä–∫–æ–≤–∫–∞ - 30', '–ö–∞—Ä—Ç–æ—à–∫–∞ - 50', '–ë–∏–≥ –ú–∞–∫ - 350', '–ß–∏–∑–±—É—Ä–≥–µ—Ä - 150', '–í–æ–¥–∞ - 0']
#
#
# @bot.callback_query_handler(func=lambda call: call.data in ["change_product", "cancel_product"])
# def handle_change_cancel_product_callback(call):
#     user_id = call.from_user.id
#     chat_id = call.message.chat.id
#     message_id = call.message.message_id
#
#     if call.data == "change_product":
#         user_data[user_id]['state'] = States.CHOOSE_PRODUCT
#         bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", chat_id, message_id)
#     else:
#         user_data[user_id]['state'] = States.START
#         bot.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ", chat_id, message_id)
#
#
# @bot.callback_query_handler(func=lambda call: call.data.startswith('product'))
# def handle_product_callback(call):
#     user_id = call.from_user.id
#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     product_id = int(call.data.split('_')[1])
#     user_data[user_id]['current_product'] = product_id
#
#     text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –ø—Ä–æ–¥—É–∫—Ç–∞."
#     bot.send_message(user_id, text)
#     user_data[user_id]['state'] = States.ADD_GRAMS
#
#
# @bot.message_handler(func=lambda message: message.from_user.id in user_data and user_data[message.from_user.id]['state'] == States.ADD_GRAMS)
# def handle_grams_input(message):
#     user_id = message.from_user.id
#     if message.text.isdigit():
#         grams = int(message.text)
#         # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª
#         product_id = user_data[user_id]['current_product']
#         # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
#         product = user_data[message.from_user.id]['product_options'][product_id - 1]
#         # –í—ã—á–∏—Å–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º
#         calories = get_dish_by_number(user_data[message.from_user.id]['product_options'], product_id)
#
#         # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏ –µ–≥–æ –∫–∞–ª–æ—Ä–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         if 'products' not in user_data[user_id]:
#             user_data[user_id]['products'] = {}
#         user_data[user_id]['products'][product_id] = {'name': product, 'calories': calories}
#         text = "–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
#         for i, (product_id, product_data) in enumerate(user_data[user_id]['products'].items(), 1):
#             text += f"{i}. {product_data['name']}, {product_data['calories']['Calories']} –∫–∫–∞–ª\n"
#
#         keyboard = types.InlineKeyboardMarkup(row_width=2)
#         save_button = types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")
#         add_more_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_more")
#         change_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="change")
#         keyboard.add(save_button, add_more_button, change_button)
#
#         bot.send_message(user_id, text, reply_markup=keyboard)
#         user_data[user_id]['state'] = States.PRODUCT_ACTIONS
#
#
# @bot.message_handler(func=lambda message: message.from_user.id in user_data and user_data[message.from_user.id]['state'] == States.CHOOSE_PRODUCT)
# def handle_product_name(message):
#     user_data[message.from_user.id]['state'] = States.CHOOSE_PRODUCT
#     product_name = message.text
#
#     product_options = search_food(product_name)
#
#     user_data[message.from_user.id]['product_options'] = product_options
#
#     text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
#     for i, option in enumerate(product_options, 1):
#         text += f"{i}. {option}\n"
#
#     markup = types.InlineKeyboardMarkup()
#     for i in range(1, len(product_options) + 1):
#         button = types.InlineKeyboardButton(str(i), callback_data=f"product_{i}")
#         markup.add(button)
#     button_change = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change_product")
#     button_cancel = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_product")
#     markup.add(button_change, button_cancel)
#     bot.send_message(message.chat.id, text, reply_markup=markup)
#
#
# @bot.callback_query_handler(func=lambda call: call.data.startswith("choose_product_"))
# def handle_choose_product_callback(call):
#     user_id = call.from_user.id
#     if user_id not in user_data:
#         user_data[user_id] = {}
#
#     chosen_option = int(call.data.split("_")[-1]) - 1
#     product = user_data[user_id]['product_options'][chosen_option]
#     calories = int(product.split()[-1])  # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
#
#     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
#     meal_index = {
#         "breakfast": 0,
#         "lunch": 1,
#         "dinner": 2,
#         "snack": 3,
#     }
#
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –≤ handle_meal_callback
#     current_meal = user_data[user_id]['current_meal']
#     current_meal_index = meal_index[current_meal]
#
#     user = PaidUser.objects.get(user=user_id)
#     delta_days = (timezone.now().date() - user.paid_day).days
#     current_day = delta_days
#
#     user_calories = user_data[user_id][current_day]
#     if current_meal == 'snack':
#         user_calories[current_meal_index].append(calories)
#     else:
#         user_calories[current_meal_index] = calories
#
#     # user_calories_obj = UserCalories.objects.get(user=user)
#
#     day_attr = f'day{current_day}'
#     total_calories = sum(user_calories[:-1]) + sum(user_calories[-1])
#     # setattr(user_calories_obj, day_attr, total_calories)
#     # user_calories_obj.save()
#
#     if total_calories > user.calories:
#         text = "‚ùóÔ∏è–¢—ã –ø–µ—Ä–µ–µ–ª(–∞) —Å–≤–æ—é –Ω–æ—Ä–º—É –∫–∫–∞–ª, —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 80% –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –µ—à—å, –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ, —Ç–æ –ª—É—á—à–µ –æ—Ç–¥–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ–≤–æ—â–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–≥—É—Ä—Ü—ã, –º–æ—Ä–∫–æ–≤—å, –∫–∞–ø—É—Å—Ç–∞, –±—Ä–æ–∫–∫–æ–ª–∏)"
#     else:
#         text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
#     bot.send_message(user_id, text)
#
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
#     user_data[call.from_user.id]['state'] = States.START
#
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–ª–æ—Ä–∏–π
# @bot.message_handler(func=lambda message: message.from_user.id in user_data)
# def handle_new_calories(message):
#     if message.from_user.id in user_data:
#         if user_data[message.from_user.id]['state'] == States.ADD_REMOVE_CALORIES:
#             user_id = message.from_user.id
#             if message.text.isdigit():
#                 new_calories = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#                 if new_calories > 0:
#                     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
#                     meal_index = {
#                         "breakfast": 0,
#                         "lunch": 1,
#                         "dinner": 2,
#                         "snack": 3,
#                     }
#
#                     # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#                     # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –≤ handle_meal_callback
#                     current_meal = user_data[user_id]['current_meal']
#                     current_meal_index = meal_index[current_meal]
#
#                     user = PaidUser.objects.get(user=user_id)
#                     delta_days = (timezone.now().date() - user.paid_day).days
#                     current_day = delta_days
#
#                     user_calories = user_data[user_id][current_day]
#                     if current_meal == 'snack':
#                         user_calories[current_meal_index].append(new_calories)
#                     else:
#                         user_calories[current_meal_index] = new_calories
#
#                     # user_calories_obj = UserCalories.objects.get(user=user)
#
#                     day_attr = f'day{current_day}'
#                     total_calories = sum(user_calories[:-1]) + sum(user_calories[-1])
#                     # setattr(user_calories_obj, day_attr, total_calories)
#                     # user_calories_obj.save()
#
#                     if total_calories > user.calories:
#                         text = "‚ùóÔ∏è–¢—ã –ø–µ—Ä–µ–µ–ª(–∞) —Å–≤–æ—é –Ω–æ—Ä–º—É –∫–∫–∞–ª, —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 80% –∑–∞–≤–∏—Å–∏—Ç –æ—Ç" \
#                                " —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ " \
#                                "–∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –µ—à—å, –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ, —Ç–æ –ª—É—á—à–µ –æ—Ç–¥–∞—Ç—å" \
#                                " –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ–≤–æ—â–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–≥—É—Ä—Ü—ã, –º–æ—Ä–∫–æ–≤—å, –∫–∞–ø—É—Å—Ç–∞, –±—Ä–æ–∫–∫–æ–ª–∏)"
#                     else:
#                         text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
#                     bot.send_message(user_id, text)
#
#                 else:
#                     bot.send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ 0')
#             else:
#                 bot.send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ 0')
#
#
# @bot.callback_query_handler(func=lambda call: call.data in ['save', 'add_more', 'change'])
# def handle_product_actions_callback(call):
#     user_id = call.from_user.id
#     action = call.data
#
#     if action == 'save':
#         meal_index = {
#             "breakfast": 0,
#             "lunch": 1,
#             "dinner": 2,
#             "snack": 3,
#         }
#         total_calories = sum(product_data['calories']['Calories'] for product_data in user_data[user_id]['products'].values())
#         user = PaidUser.objects.get(user=user_id)
#         delta_days = (timezone.now().date() - user.paid_day).days
#         current_day = delta_days
#         # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏,
#         # –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –≤ handle_meal_callback
#         current_meal = user_data[user_id]['current_meal']
#         current_meal_index = meal_index[current_meal]
#
#         user_calories = user_data[user_id][current_day]
#         if current_meal == 'snack':
#             user_calories[current_meal_index].append(total_calories)
#         else:
#             user_calories[current_meal_index] = total_calories
#
#         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
#
#         # user_calories_obj = UserCalories.objects.get(user=user)
#         #
#         # day_attr = f'day{current_day}'
#         # setattr(user_calories_obj, day_attr, total_calories)
#         # user_calories_obj.save()
#
#         bot.send_message(user_id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
#     elif action == 'add_more':
#         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ"
#         bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.')
#         user_data[user_id]['state'] = States.CHOOSE_PRODUCT
#     elif action == 'change':
#         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
#         text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n"
#         keyboard = types.InlineKeyboardMarkup(row_width=1)
#         for i, (product_id, product_data) in enumerate(user_data[user_id]['products'].items(), 1):
#             button_text = f"{i}. {product_data['name']}"  # –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ i,
#             # –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
#             button = types.InlineKeyboardButton(button_text, callback_data=f'change_{product_id}')
#             keyboard.add(button)
#
#         bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text,
#                               reply_markup=keyboard)
#         user_data[user_id]['state'] = States.CHANGE_PRODUCT
#
#
# @bot.callback_query_handler(func=lambda call: call.data.startswith('change_') and call.from_user.id in user_data and user_data[call.from_user.id]['state'] == States.CHANGE_PRODUCT)
# def handle_selected_product_callback(call):
#
#     user_id = call.from_user.id
#     product_id = int(call.data.split('_')[1])
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
#     user_data[user_id]['current_product'] = product_id
#
#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–Ω–∞–∑–∞–¥", "—É–¥–∞–ª–∏—Ç—å" –∏ "–∏–∑–º–µ–Ω–∏—Ç—å"
#     keyboard = types.InlineKeyboardMarkup(row_width=1)
#     back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
#     delete_button = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data=f'delete_{product_id}')
#     change_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º", callback_data=f'change_grams_{product_id}')
#     keyboard.add(back_button, delete_button, change_button)
#
#     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º?', reply_markup=keyboard)
#
#
# @bot.callback_query_handler(func=lambda call: call.data == 'back' and call.from_user.id in user_data and user_data[call.from_user.id]['state'] == States.CHANGE_PRODUCT)
# def handle_back_callback(call):
#     user_id = call.from_user.id
#     # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
#     text = "–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
#     for i, (product_id, product_data) in enumerate(user_data[user_id]['products'].items(), 1):
#         text += f"{i}. {product_data['name']}, {product_data['calories']['Calories']} –∫–∫–∞–ª\n"
#
#     # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ" –∏ "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
#     keyboard = types.InlineKeyboardMarkup(row_width=2)
#     save_button = types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")
#     add_more_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_more")
#     change_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="change")
#     keyboard.add(save_button, add_more_button, change_button)
#
#     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=keyboard)
#
#
# @bot.callback_query_handler(func=lambda call: call.data.startswith('delete_') and call.from_user.id in user_data and user_data[call.from_user.id]['state'] == States.CHANGE_PRODUCT)
# def handle_delete_product_callback(call):
#     user_id = call.from_user.id
#     product_id = int(call.data.split('_')[1])
#
#     # —É–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
#     del user_data[user_id]['products'][product_id]
#
#     # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
#     text = "–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
#     for i, (product_id, product_data) in enumerate(user_data[user_id]['products'].items(), 1):
#         text += f"{i}. {product_data['name']}, {product_data['calories']} –∫–∫–∞–ª\n"
#
#     # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ" –∏ "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
#     keyboard = types.InlineKeyboardMarkup(row_width=2)
#     save_button = types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")
#     add_more_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_more")
#     change_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="change")
#     keyboard.add(save_button, add_more_button, change_button)
#
#     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=keyboard)
#
#
# @bot.callback_query_handler(func=lambda call: call.data.startswith('change_grams_'))
# def handle_change_grams_callback(call):
#     user_id = call.from_user.id
#     product_id = int(call.data.split('_')[2])
#
#     # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å
#     user_data[user_id]['current_product'] = product_id
#
#     text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –ø—Ä–æ–¥—É–∫—Ç–∞."
#     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text)
#     user_data[user_id]['state'] = States.CHANGE_GRAMS
#
#
# @bot.message_handler(func=lambda message: message.from_user.id in user_data and user_data[message.from_user.id]['state'] == States.CHANGE_GRAMS)
# def handle_change_grams_input(message):
#     user_id = message.from_user.id
#     if message.text.isdigit():
#         grams = int(message.text)
#         product_id = user_data[user_id]['current_product']
#         product = user_data[user_id]['products'][product_id]
#
#         # –í—ã—á–∏—Å–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º
#         # calories = calculate_nutrients(user_data[user_id]['product_options'], product_id, grams)
#         # product['calories'] = calories
#
#         # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
#         text = "–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
#         for i, (product_id, product_data) in enumerate(user_data[user_id]['products'].items(), 1):
#             text += f"{i}. {product_data['name']}, {product_data['calories']} –∫–∫–∞–ª\n"
#
#         # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ" –∏ "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
#         keyboard = types.InlineKeyboardMarkup(row_width=2)
#         save_button = types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")
#         add_more_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_more")
#         change_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="change")
#         keyboard.add(save_button, add_more_button, change_button)
#
#         bot.send_message(user_id, text, reply_markup=keyboard)
#         user_data[user_id]['state'] = States.PRODUCT_ACTIONS


bot.add_custom_filter(custom_filters.StateFilter(bot))
