from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from django.utils import timezone
from telebot import types

from telegram_bot.loader import bot
from telegram_bot.states import States
from telegram_bot.models import PaidUser, UnpaidUser, UserCalories

user_data = {}


@bot.message_handler(func=lambda message: message.text == '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –∫–∞–ª–æ—Ä–∏–π üìÜ')
def handle_update_calories(message):
    user_id = message.from_user.id
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ States.UPDATE_CALORIES

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏—è—Ö –∏–∑ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ UserCalories –∏ –≤—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞–ª–æ—Ä–∏–∏

     # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω—É–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏—è—Ö –∏–∑ –º–æ–¥–µ–ª–∏ UserCalories

    user = PaidUser.objects.get(user=user_id)
    delta_days = (timezone.now().date() - user.paid_day).days
    current_day = delta_days

    if current_day != 0:


        if user_id not in user_data:
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user_data[user_id] = {day: [0, 0, 0, []] for day in range(1, 22)}

        user_calories = user_data[user_id][current_day]
        daily_norm = user.calories

        total_snacks_calories = sum(user_calories[3])
        remaining_calories = daily_norm - (user_calories[0] + user_calories[1] + user_calories[2] + total_snacks_calories)

        snacks_text = ''
        for i, snack_calories in enumerate(user_calories[3], start=1):
            snacks_text += f"üçù –ø–µ—Ä–µ–∫—É—Å ‚Ññ{i} - {snack_calories}\n"

        text = (
            f"üç≥ –ó–∞–≤—Ç—Ä–∞–∫ - {user_calories[0]} –∫–∫–∞–ª\n"
            f"ü•ó –û–±–µ–¥ - {user_calories[1]} –∫–∫–∞–ª\n"
            f"–£–∂–∏–Ω - {user_calories[2]} –∫–∫–∞–ª\n"
            f"{snacks_text}\n\n"
            f"- –¢–µ–∫—É—â–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_norm} –∫–∫–∞–ª\n- –¢—ã –µ—â–µ –º–æ–∂–µ—à—å —Å—ä–µ—Å—Ç—å: {remaining_calories} –∫–∫–∞–ª –¥–æ –Ω–µ–µ\n\n"
            f"–ö–∞–∫–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å?\n\n"
            f"(–ù–∞ –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç –¥–æ–±–∞–≤–ª—è–π —Å–∫–æ–ª—å–∫–æ —Å—É–º–º–∞—Ä–Ω–æ —Ç—ã —Å—ä–µ–ª(–∞) –∑–∞ –æ–¥–∏–Ω –ø—Ä–∏–µ–º)"
        )
        markup = create_calories_menu()
        bot.send_message(user_id, text, reply_markup=markup)
    else:
        bot.send_message(user_id, '–ö—É—Ä—Å –Ω–∞—á–Ω–µ—Ç—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è! '
                                  '–ü–æ—ç—Ç–æ–º—É –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è')


@bot.message_handler(func=lambda message: message.text == '–°–∫–æ–ª—å–∫–æ –µ—â–µ –º–æ–∂–Ω–æ –∫–∫–∞–ª?üëÄ')
def calories_info(message: Message):
    user_id = message.from_user.id

    user = PaidUser.objects.get(user=user_id)
    delta_days = (timezone.now().date() - user.paid_day).days
    current_day = delta_days
    if current_day == 0:
        bot.send_message(user_id, '–ö—É—Ä—Å –Ω–∞—á–Ω–µ—Ç—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è! '
                                  '–ü–æ—ç—Ç–æ–º—É –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è')
    else:
        if user_id not in user_data:
            user_data[user_id] = {day: [0, 0, 0, []] for day in range(1, 22)}

        user_calories = user_data[user_id][current_day]
        daily_norm = user.calories
        total_snacks_calories = sum(user_calories[3])
        total_calories = user_calories[0] + user_calories[1] + user_calories[2] + total_snacks_calories
        remaining_calories = daily_norm - total_calories

        if remaining_calories <= 0:
            text = "‚ùóÔ∏è–¢—ã –ø–µ—Ä–µ–µ–ª(–∞) —Å–≤–æ—é –Ω–æ—Ä–º—É –∫–∫–∞–ª, —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 80% –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –µ—à—å, –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ, —Ç–æ –ª—É—á—à–µ –æ—Ç–¥–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ–≤–æ—â–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–≥—É—Ä—Ü—ã, –º–æ—Ä–∫–æ–≤—å, –∫–∞–ø—É—Å—Ç–∞, –±—Ä–æ–∫–∫–æ–ª–∏)"
        else:
            text = f"üî• –¢–µ–±–µ –º–æ–∂–Ω–æ —Å—ä–µ—Å—Ç—å –µ—â–µ: {remaining_calories} –∫–∫–∞–ª"
        bot.send_message(user_id, text)


def create_calories_menu():
    markup = types.InlineKeyboardMarkup()

    button_breakfast = types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫", callback_data="breakfast")
    button_lunch = types.InlineKeyboardButton("–û–±–µ–¥", callback_data="lunch")
    button_dinner = types.InlineKeyboardButton("–£–∂–∏–Ω", callback_data="dinner")
    button_snack = types.InlineKeyboardButton("–ü–µ—Ä–µ–∫—É—Å", callback_data="snack")
    button_progress = types.InlineKeyboardButton("–û—Ç—á–µ—Ç –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥", callback_data="progress")

    markup.row(button_breakfast, button_lunch)
    markup.row(button_dinner, button_snack)
    markup.row(button_progress)

    return markup


def create_calories_add_or_remove_menu():
    markup = types.InlineKeyboardMarkup()

    button_add_remove = types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="add_remove")
    button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")

    markup.row(button_add_remove)
    markup.row(button_back)

    return markup


@bot.callback_query_handler(func=lambda call: call.data in ["breakfast", "lunch", "dinner", "snack", "progress"])
def handle_meal_callback(call):
    meal = call.data
    user_id = call.from_user.id
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    user_data[call.from_user.id]['state'] = States.ADD_REMOVE_CALORIES
    user = PaidUser.objects.get(user=user_id)
    delta_days = (timezone.now().date() - user.paid_day).days
    current_day = delta_days

    if user_id not in user_data:
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user_data[user_id] = {day: [0, 0, 0, []] for day in range(1, 22)}

    user_calories = user_data[user_id][current_day]
    user_data[call.from_user.id]['current_meal'] = meal

    if meal == "breakfast":
        text = f"–í—ã —Å—ä–µ–ª–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫ - {user_calories[0]}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–±–∞–≤–∏—Ç—å?"
        markup = create_calories_add_or_remove_menu()
    elif meal == "lunch":
        text = f"–í—ã —Å—ä–µ–ª–∏ –Ω–∞ –æ–±–µ–¥ - {user_calories[1]}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–±–∞–≤–∏—Ç—å?"
        markup = create_calories_add_or_remove_menu()
    elif meal == "dinner":
        text = f"–í—ã —Å—ä–µ–ª–∏ –Ω–∞ —É–∂–∏–Ω - {user_calories[2]}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–±–∞–≤–∏—Ç—å?"
        markup = create_calories_add_or_remove_menu()
    elif meal == 'snack':
        text = f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∫—É—Å?"
        markup = create_calories_add_or_remove_menu()
    else:
        user_calories_obj = UserCalories.objects.get(user=user)
        progress_text = ''
        for day in range(1, current_day + 1):
            day_calories = getattr(user_calories_obj, f'day{day}')
            progress_text += f'–î–µ–Ω—å {day}: {day_calories} –∫–∞–ª–æ—Ä–∏–π\n'
        text = f'üßæ –¢—É—Ç –æ—Ç—á–µ—Ç –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –∫–∫–∞–ª–æ—Ä–∏–π —Ç—ã —É–ø–æ—Ç—Ä–µ–±–ª—è–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥:\n\n#21FIT\n\n{progress_text}'
        markup = types.InlineKeyboardMarkup()
        button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
        markup.add(button_back)

    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["add_remove", "back"])
def handle_add_remove_callback(call):
    if user_data[call.from_user.id]['state'] == States.ADD_REMOVE_CALORIES:
        action = call.data
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        user_data[call.from_user.id]['state'] = States.ADD_REMOVE_CALORIES if action == "add_remove" else States.START
        user_id = call.from_user.id
        user = PaidUser.objects.get(user=user_id)
        delta_days = (timezone.now().date() - user.paid_day).days
        current_day = delta_days

        user_calories = user_data[user_id][current_day]
        daily_norm = user.calories
        total_snacks_calories = sum(user_calories[3])
        remaining_calories = daily_norm - (user_calories[0] + user_calories[1] + user_calories[2] + total_snacks_calories)

        snacks_text = ''
        for i, snack_calories in enumerate(user_calories[3], start=1):
            snacks_text += f"üçù –ø–µ—Ä–µ–∫—É—Å ‚Ññ{i} - {snack_calories}\n"

        if action == "back":
            text = (
                f"üç≥ –ó–∞–≤—Ç—Ä–∞–∫ - {user_calories[0]} –∫–∫–∞–ª\n"
                f"ü•ó –û–±–µ–¥ - {user_calories[1]} –∫–∫–∞–ª\n"
                f"–£–∂–∏–Ω - {user_calories[2]} –∫–∫–∞–ª\n"
                f"{snacks_text}\n\n"
                f"- –¢–µ–∫—É—â–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_norm} –∫–∫–∞–ª\n- –¢—ã –µ—â–µ –º–æ–∂–µ—à—å —Å—ä–µ—Å—Ç—å: {remaining_calories} –∫–∫–∞–ª –¥–æ –Ω–µ–µ\n\n"
                f"–ö–∞–∫–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å?\n\n"
                f"(–ù–∞ –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç –¥–æ–±–∞–≤–ª—è–π —Å–∫–æ–ª—å–∫–æ —Å—É–º–∞—Ä–Ω–æ —Ç—ã —Å—ä–µ–ª(–∞) –∑–∞ –æ–¥–∏–Ω –ø—Ä–∏–µ–º)"
            )
            markup = create_calories_menu()
        else:
            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π:"
            markup = None

        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–ª–æ—Ä–∏–π
@bot.message_handler(func=lambda message: message.from_user.id in user_data)
def handle_new_calories(message):
    if message.from_user.id in user_data:
        if user_data[message.from_user.id]['state'] == States.ADD_REMOVE_CALORIES:
            user_id = message.from_user.id
            if message.text.isdigit():
                new_calories = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if new_calories > 0:
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
                    meal_index = {
                        "breakfast": 0,
                        "lunch": 1,
                        "dinner": 2,
                        "snack": 3,
                    }

                    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –≤ handle_meal_callback
                    current_meal = user_data[user_id]['current_meal']
                    current_meal_index = meal_index[current_meal]

                    user = PaidUser.objects.get(user=user_id)
                    delta_days = (timezone.now().date() - user.paid_day).days
                    current_day = delta_days

                    user_calories = user_data[user_id][current_day]
                    if current_meal == 'snack':
                        user_calories[current_meal_index].append(new_calories)
                    else:
                        user_calories[current_meal_index] = new_calories

                    user_calories_obj = UserCalories.objects.get(user=user)

                    day_attr = f'day{current_day}'
                    total_calories = sum(user_calories[:-1]) + sum(user_calories[-1])
                    setattr(user_calories_obj, day_attr, total_calories)
                    user_calories_obj.save()

                    if total_calories > user.calories:
                        text = "‚ùóÔ∏è–¢—ã –ø–µ—Ä–µ–µ–ª(–∞) —Å–≤–æ—é –Ω–æ—Ä–º—É –∫–∫–∞–ª, —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 80% –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –µ—à—å, –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ, —Ç–æ –ª—É—á—à–µ –æ—Ç–¥–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ–≤–æ—â–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–≥—É—Ä—Ü—ã, –º–æ—Ä–∫–æ–≤—å, –∫–∞–ø—É—Å—Ç–∞, –±—Ä–æ–∫–∫–æ–ª–∏)"
                    else:
                        text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
                    bot.send_message(user_id, text)

                else:
                    bot.send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ 0')
            else:
                bot.send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ 0')
