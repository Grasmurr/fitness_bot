from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from django.utils import timezone
from telebot import types
import re
import requests
import json
import csv
from collections import Counter

from telegram_bot.loader import bot
from telegram_bot.states import States
from telegram_bot.models import PaidUser, UnpaidUser, UserCalories

user_data = {}


def preprocess(text):
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, —É–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º
    return re.findall(r'\b\w+\b', text.lower())


# –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª, –∞ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
def search_food(query):
    url = "https://fs2.tvoydnevnik.com/api2/food_search/search"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
    }
    data = {
        "jwt": "false",
        "DeviceSize": "XSmall",
        "DeviceSizeDiary": "XSmall",
        "query[count_on_page]": 5,
        "query[page]": 1,
        "query[name]": query,
        "platformId": 101,
    }

    response = requests.post(url, headers=headers, data=data)
    response_dict = json.loads(response.text)

    dish_list = []
    for i, food_item in enumerate(response_dict["result"]["list"]):
        name = food_item['food']['name']
        nutrients = food_item['food']['nutrientsShort']
        dish_list.append((name, nutrients))

    return dish_list


def get_dish_by_number(dish_list, number):
    if 0 <= number < len(dish_list):
        return dish_list[number]
    else:
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞ –±–ª—é–¥–∞ –∏ –≤–µ—Å–∞ –≤ –≥—Ä–∞–º–º–∞—Ö
# def calculate_nutrients(top5_dishes, right_dish_index, grams):
#     # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É
#     chosen_dish_name = top5_dishes[right_dish_index - 1]
#
#     # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ –±–ª—é–¥–µ –≤ –±–∞–∑–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
#     chosen_dish_data = next(dish for dish in dishes_data if dish['Title'] == chosen_dish_name)
#
#     # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–∞ –≤ –≥—Ä–∞–º–º–∞—Ö
#     calories = float(chosen_dish_data['Calories']) * grams / 100
#     proteins = float(chosen_dish_data['Proteins']) * grams / 100
#     fats = float(chosen_dish_data['Fats']) * grams / 100
#     carbohydrates = float(chosen_dish_data['Carbohydrates']) * grams / 100
#
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
#     return {
#         'Title': chosen_dish_name,
#         'Calories': calories,
#         'Proteins': proteins,
#         'Fats': fats,
#         'Carbohydrates': carbohydrates
#     }


@bot.message_handler(func=lambda message: message.text == '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –∫–∞–ª–æ—Ä–∏–π üìÜ')
def handle_update_calories(message):
    user_id = message.from_user.id
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ States.UPDATE_CALORIES

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏—è—Ö –∏–∑ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ UserCalories –∏ –≤—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞–ª–æ—Ä–∏–∏

     # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω—É–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏—è—Ö –∏–∑ –º–æ–¥–µ–ª–∏ UserCalories

    user = PaidUser.objects.get(user=user_id)
    delta_days = (timezone.now().date() - user.paid_day).days
    current_day = delta_days

    if current_day != 0:


        if user_id not in user_data:
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user_data[user_id] = {day: [0, 0, 0, []] for day in range(1, 22)}

        user_calories = user_data[user_id][current_day]
        daily_norm = user.calories

        total_snacks_calories = sum(user_calories[3])
        remaining_calories = round(daily_norm - (user_calories[0] + user_calories[1] + user_calories[2] + total_snacks_calories), 1)

        snacks_text = ''
        for i, snack_calories in enumerate(user_calories[3], start=1):
            snacks_text += f"üçù –ø–µ—Ä–µ–∫—É—Å ‚Ññ{i} - {snack_calories}\n"

        text = (
            f"üç≥ –ó–∞–≤—Ç—Ä–∞–∫ - {user_calories[0]} –∫–∫–∞–ª\n"
            f"ü•ó –û–±–µ–¥ - {user_calories[1]} –∫–∫–∞–ª\n"
            f"–£–∂–∏–Ω - {user_calories[2]} –∫–∫–∞–ª\n"
            f"{snacks_text}\n\n"
            f"- –¢–µ–∫—É—â–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_norm} –∫–∫–∞–ª\n- –¢—ã –µ—â–µ –º–æ–∂–µ—à—å —Å—ä–µ—Å—Ç—å: {remaining_calories} –∫–∫–∞–ª –¥–æ –Ω–µ–µ\n\n"
            f"–ö–∞–∫–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å?\n\n"
            f"(–ù–∞ –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç –¥–æ–±–∞–≤–ª—è–π —Å–∫–æ–ª—å–∫–æ —Å—É–º–º–∞—Ä–Ω–æ —Ç—ã —Å—ä–µ–ª(–∞) –∑–∞ –æ–¥–∏–Ω –ø—Ä–∏–µ–º)"
        )
        markup = create_calories_menu()
        bot.send_message(user_id, text, reply_markup=markup)
    else:
        bot.send_message(user_id, '–ö—É—Ä—Å –Ω–∞—á–Ω–µ—Ç—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è! '
                                  '–ü–æ—ç—Ç–æ–º—É –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è')


@bot.message_handler(func=lambda message: message.text == '–°–∫–æ–ª—å–∫–æ –µ—â–µ –º–æ–∂–Ω–æ –∫–∫–∞–ª?üëÄ')
def calories_info(message: Message):
    user_id = message.from_user.id

    user = PaidUser.objects.get(user=user_id)
    delta_days = (timezone.now().date() - user.paid_day).days
    current_day = delta_days
    if current_day == 0:
        bot.send_message(user_id, '–ö—É—Ä—Å –Ω–∞—á–Ω–µ—Ç—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è! '
                                  '–ü–æ—ç—Ç–æ–º—É –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è')
    else:
        if user_id not in user_data:
            user_data[user_id] = {day: [0, 0, 0, []] for day in range(1, 22)}

        user_calories = user_data[user_id][current_day]
        daily_norm = user.calories
        total_snacks_calories = sum(user_calories[3])
        total_calories = user_calories[0] + user_calories[1] + user_calories[2] + total_snacks_calories
        remaining_calories = daily_norm - total_calories

        if remaining_calories <= 0:
            text = "‚ùóÔ∏è–¢—ã –ø–µ—Ä–µ–µ–ª(–∞) —Å–≤–æ—é –Ω–æ—Ä–º—É –∫–∫–∞–ª, —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 80% –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –µ—à—å, –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ, —Ç–æ –ª—É—á—à–µ –æ—Ç–¥–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ–≤–æ—â–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–≥—É—Ä—Ü—ã, –º–æ—Ä–∫–æ–≤—å, –∫–∞–ø—É—Å—Ç–∞, –±—Ä–æ–∫–∫–æ–ª–∏)"
        else:
            text = f"üî• –¢–µ–±–µ –º–æ–∂–Ω–æ —Å—ä–µ—Å—Ç—å –µ—â–µ: {remaining_calories} –∫–∫–∞–ª"
        bot.send_message(user_id, text)


def create_calories_menu():
    markup = types.InlineKeyboardMarkup()

    button_breakfast = types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫", callback_data="breakfast")
    button_lunch = types.InlineKeyboardButton("–û–±–µ–¥", callback_data="lunch")
    button_dinner = types.InlineKeyboardButton("–£–∂–∏–Ω", callback_data="dinner")
    button_snack = types.InlineKeyboardButton("–ü–µ—Ä–µ–∫—É—Å", callback_data="snack")
    button_progress = types.InlineKeyboardButton("–û—Ç—á–µ—Ç –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥", callback_data="progress")

    markup.row(button_breakfast, button_lunch)
    markup.row(button_dinner, button_snack)
    markup.row(button_progress)

    return markup


def create_calories_add_or_remove_menu():
    markup = types.InlineKeyboardMarkup()

    button_add_remove = types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="add_remove")
    button_add_product = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")
    button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")

    markup.row(button_add_remove)
    markup.row(button_add_product)
    markup.row(button_back)

    return markup


@bot.callback_query_handler(func=lambda call: call.data in ["breakfast", "lunch", "dinner", "snack", "progress"])
def handle_meal_callback(call):
    meal = call.data
    user_id = call.from_user.id
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    user_data[call.from_user.id]['state'] = States.ADD_REMOVE_CALORIES
    user = PaidUser.objects.get(user=user_id)
    delta_days = (timezone.now().date() - user.paid_day).days
    current_day = delta_days

    if user_id not in user_data:
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user_data[user_id] = {day: [0, 0, 0, []] for day in range(1, 22)}

    user_calories = user_data[user_id][current_day]
    user_data[call.from_user.id]['current_meal'] = meal

    if meal == "breakfast":
        text = f"–í—ã —Å—ä–µ–ª–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫ - {user_calories[0]}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–±–∞–≤–∏—Ç—å?"
        markup = create_calories_add_or_remove_menu()
    elif meal == "lunch":
        text = f"–í—ã —Å—ä–µ–ª–∏ –Ω–∞ –æ–±–µ–¥ - {user_calories[1]}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–±–∞–≤–∏—Ç—å?"
        markup = create_calories_add_or_remove_menu()
    elif meal == "dinner":
        text = f"–í—ã —Å—ä–µ–ª–∏ –Ω–∞ —É–∂–∏–Ω - {user_calories[2]}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–±–∞–≤–∏—Ç—å?"
        markup = create_calories_add_or_remove_menu()
    elif meal == 'snack':
        text = f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∫—É—Å?"
        markup = create_calories_add_or_remove_menu()
    else:
        user_calories_obj = UserCalories.objects.get(user=user)
        progress_text = ''
        for day in range(1, current_day + 1):
            day_calories = getattr(user_calories_obj, f'day{day}')
            progress_text += f'–î–µ–Ω—å {day}: {day_calories} –∫–∞–ª–æ—Ä–∏–π\n'
        text = f'üßæ –¢—É—Ç –æ—Ç—á–µ—Ç –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –∫–∫–∞–ª–æ—Ä–∏–π —Ç—ã —É–ø–æ—Ç—Ä–µ–±–ª—è–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥:\n\n#21FIT\n\n{progress_text}'
        markup = types.InlineKeyboardMarkup()
        button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
        markup.add(button_back)

    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "add_product")
def handle_add_product_callback(call):
    user_data[call.from_user.id]['state'] = States.CHOOSE_PRODUCT
    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:"
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data in ["add_remove", "back"])
def handle_add_remove_callback(call):
    if user_data[call.from_user.id]['state'] == States.ADD_REMOVE_CALORIES:
        action = call.data
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        user_data[call.from_user.id]['state'] = States.ADD_REMOVE_CALORIES if action == "add_remove" else States.START
        user_id = call.from_user.id
        user = PaidUser.objects.get(user=user_id)
        delta_days = (timezone.now().date() - user.paid_day).days
        current_day = delta_days

        user_calories = user_data[user_id][current_day]
        daily_norm = user.calories
        total_snacks_calories = sum(user_calories[3])
        remaining_calories = daily_norm - (user_calories[0] + user_calories[1] + user_calories[2] + total_snacks_calories)

        snacks_text = ''
        for i, snack_calories in enumerate(user_calories[3], start=1):
            snacks_text += f"üçù –ø–µ—Ä–µ–∫—É—Å ‚Ññ{i} - {snack_calories}\n"

        if action == "back":
            text = (
                f"üç≥ –ó–∞–≤—Ç—Ä–∞–∫ - {user_calories[0]} –∫–∫–∞–ª\n"
                f"ü•ó –û–±–µ–¥ - {user_calories[1]} –∫–∫–∞–ª\n"
                f"–£–∂–∏–Ω - {user_calories[2]} –∫–∫–∞–ª\n"
                f"{snacks_text}\n\n"
                f"- –¢–µ–∫—É—â–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_norm} –∫–∫–∞–ª\n- –¢—ã –µ—â–µ –º–æ–∂–µ—à—å —Å—ä–µ—Å—Ç—å: {remaining_calories} –∫–∫–∞–ª –¥–æ –Ω–µ–µ\n\n"
                f"–ö–∞–∫–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å?\n\n"
                f"(–ù–∞ –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç –¥–æ–±–∞–≤–ª—è–π —Å–∫–æ–ª—å–∫–æ —Å—É–º–∞—Ä–Ω–æ —Ç—ã —Å—ä–µ–ª(–∞) –∑–∞ –æ–¥–∏–Ω –ø—Ä–∏–µ–º)"
            )
            markup = create_calories_menu()
        else:
            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π:"
            markup = None

        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)


def search_product(product_name):
    return ['–ú–æ—Ä–∫–æ–≤–∫–∞ - 30', '–ö–∞—Ä—Ç–æ—à–∫–∞ - 50', '–ë–∏–≥ –ú–∞–∫ - 350', '–ß–∏–∑–±—É—Ä–≥–µ—Ä - 150', '–í–æ–¥–∞ - 0']


@bot.callback_query_handler(func=lambda call: call.data in ["change_product", "cancel_product"])
def handle_change_cancel_product_callback(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    if call.data == "change_product":
        user_data[user_id]['state'] = States.CHOOSE_PRODUCT
        bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", chat_id, message_id)
    else:
        user_data[user_id]['state'] = States.START
        bot.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ", chat_id, message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('product'))
def handle_product_callback(call):
    user_id = call.from_user.id
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    product_id = int(call.data.split('_')[1])
    user_data[user_id]['current_product'] = product_id

    text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –ø—Ä–æ–¥—É–∫—Ç–∞."
    bot.send_message(user_id, text)
    user_data[user_id]['state'] = States.ADD_GRAMS


@bot.message_handler(func=lambda message: message.from_user.id in user_data and user_data[message.from_user.id]['state'] == States.ADD_GRAMS)
def handle_grams_input(message):
    user_id = message.from_user.id
    if message.text.isdigit():
        grams = int(message.text)
        # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª
        product_id = user_data[user_id]['current_product']
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
        product = user_data[message.from_user.id]['product_options'][product_id - 1]
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º
        calories = get_dish_by_number(user_data[message.from_user.id]['product_options'], product_id)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏ –µ–≥–æ –∫–∞–ª–æ—Ä–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'products' not in user_data[user_id]:
            user_data[user_id]['products'] = {}
        user_data[user_id]['products'][product_id] = {'name': product, 'calories': calories}


        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        text = "–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        for i, (product_id, product_data) in enumerate(user_data[user_id]['products'].items(), 1):
            text += f"{i}. {product_data['name']}, {product_data['calories']['Calories']} –∫–∫–∞–ª\n"

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ" –∏ "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        save_button = types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")
        add_more_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_more")
        change_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="change")
        keyboard.add(save_button, add_more_button, change_button)

        bot.send_message(user_id, text, reply_markup=keyboard)
        user_data[user_id]['state'] = States.PRODUCT_ACTIONS


@bot.message_handler(func=lambda message: message.from_user.id in user_data and user_data[message.from_user.id]['state'] == States.CHOOSE_PRODUCT)
def handle_product_name(message):
    user_data[message.from_user.id]['state'] = States.CHOOSE_PRODUCT
    product_name = message.text

    product_options = search_food(product_name)  # –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é search_product

    user_data[message.from_user.id]['product_options'] = product_options

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
    for i, option in enumerate(product_options, 1):
        text += f"{i}. {option}\n"

    markup = types.InlineKeyboardMarkup()
    for i in range(1, len(product_options) + 1):
        button = types.InlineKeyboardButton(str(i), callback_data=f"product_{i}")
        markup.add(button)
    button_change = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change_product")
    button_cancel = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_product")
    markup.add(button_change, button_cancel)
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_product_"))
def handle_choose_product_callback(call):
    user_id = call.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {}

    chosen_option = int(call.data.split("_")[-1]) - 1
    product = user_data[user_id]['product_options'][chosen_option]
    calories = int(product.split()[-1])  # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    meal_index = {
        "breakfast": 0,
        "lunch": 1,
        "dinner": 2,
        "snack": 3,
    }

    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –≤ handle_meal_callback
    current_meal = user_data[user_id]['current_meal']
    current_meal_index = meal_index[current_meal]

    user = PaidUser.objects.get(user=user_id)
    delta_days = (timezone.now().date() - user.paid_day).days
    current_day = delta_days

    user_calories = user_data[user_id][current_day]
    if current_meal == 'snack':
        user_calories[current_meal_index].append(calories)
    else:
        user_calories[current_meal_index] = calories

    user_calories_obj = UserCalories.objects.get(user=user)

    day_attr = f'day{current_day}'
    total_calories = sum(user_calories[:-1]) + sum(user_calories[-1])
    setattr(user_calories_obj, day_attr, total_calories)
    user_calories_obj.save()

    if total_calories > user.calories:
        text = "‚ùóÔ∏è–¢—ã –ø–µ—Ä–µ–µ–ª(–∞) —Å–≤–æ—é –Ω–æ—Ä–º—É –∫–∫–∞–ª, —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 80% –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –µ—à—å, –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ, —Ç–æ –ª—É—á—à–µ –æ—Ç–¥–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ–≤–æ—â–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–≥—É—Ä—Ü—ã, –º–æ—Ä–∫–æ–≤—å, –∫–∞–ø—É—Å—Ç–∞, –±—Ä–æ–∫–∫–æ–ª–∏)"
    else:
        text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
    bot.send_message(user_id, text)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    user_data[call.from_user.id]['state'] = States.START


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–ª–æ—Ä–∏–π
@bot.message_handler(func=lambda message: message.from_user.id in user_data)
def handle_new_calories(message):
    if message.from_user.id in user_data:
        if user_data[message.from_user.id]['state'] == States.ADD_REMOVE_CALORIES:
            user_id = message.from_user.id
            if message.text.isdigit():
                new_calories = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if new_calories > 0:
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
                    meal_index = {
                        "breakfast": 0,
                        "lunch": 1,
                        "dinner": 2,
                        "snack": 3,
                    }

                    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –≤ handle_meal_callback
                    current_meal = user_data[user_id]['current_meal']
                    current_meal_index = meal_index[current_meal]

                    user = PaidUser.objects.get(user=user_id)
                    delta_days = (timezone.now().date() - user.paid_day).days
                    current_day = delta_days

                    user_calories = user_data[user_id][current_day]
                    if current_meal == 'snack':
                        user_calories[current_meal_index].append(new_calories)
                    else:
                        user_calories[current_meal_index] = new_calories

                    user_calories_obj = UserCalories.objects.get(user=user)

                    day_attr = f'day{current_day}'
                    total_calories = sum(user_calories[:-1]) + sum(user_calories[-1])
                    setattr(user_calories_obj, day_attr, total_calories)
                    user_calories_obj.save()

                    if total_calories > user.calories:
                        text = "‚ùóÔ∏è–¢—ã –ø–µ—Ä–µ–µ–ª(–∞) —Å–≤–æ—é –Ω–æ—Ä–º—É –∫–∫–∞–ª, —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 80% –∑–∞–≤–∏—Å–∏—Ç –æ—Ç" \
                               " —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ " \
                               "–∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –µ—à—å, –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ, —Ç–æ –ª—É—á—à–µ –æ—Ç–¥–∞—Ç—å" \
                               " –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ–≤–æ—â–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–≥—É—Ä—Ü—ã, –º–æ—Ä–∫–æ–≤—å, –∫–∞–ø—É—Å—Ç–∞, –±—Ä–æ–∫–∫–æ–ª–∏)"
                    else:
                        text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
                    bot.send_message(user_id, text)

                else:
                    bot.send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ 0')
            else:
                bot.send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ 0')


@bot.callback_query_handler(func=lambda call: call.data in ['save', 'add_more', 'change'])
def handle_product_actions_callback(call):
    user_id = call.from_user.id
    action = call.data

    if action == 'save':
        meal_index = {
            "breakfast": 0,
            "lunch": 1,
            "dinner": 2,
            "snack": 3,
        }
        total_calories = sum(product_data['calories']['Calories'] for product_data in user_data[user_id]['products'].values())
        user = PaidUser.objects.get(user=user_id)
        delta_days = (timezone.now().date() - user.paid_day).days
        current_day = delta_days
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏,
        # –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –≤ handle_meal_callback
        current_meal = user_data[user_id]['current_meal']
        current_meal_index = meal_index[current_meal]

        user_calories = user_data[user_id][current_day]
        if current_meal == 'snack':
            user_calories[current_meal_index].append(total_calories)
        else:
            user_calories[current_meal_index] = total_calories

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"

        user_calories_obj = UserCalories.objects.get(user=user)

        day_attr = f'day{current_day}'
        setattr(user_calories_obj, day_attr, total_calories)
        user_calories_obj.save()

        bot.send_message(user_id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
    elif action == 'add_more':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ"
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.')
        user_data[user_id]['state'] = States.CHOOSE_PRODUCT
    elif action == 'change':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n"
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for i, (product_id, product_data) in enumerate(user_data[user_id]['products'].items(), 1):
            button_text = f"{i}. {product_data['name']}"  # –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ i,
            # –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            button = types.InlineKeyboardButton(button_text, callback_data=f'change_{product_id}')
            keyboard.add(button)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text,
                              reply_markup=keyboard)
        user_data[user_id]['state'] = States.CHANGE_PRODUCT


@bot.callback_query_handler(func=lambda call: call.data.startswith('change_') and call.from_user.id in user_data and user_data[call.from_user.id]['state'] == States.CHANGE_PRODUCT)
def handle_selected_product_callback(call):

    user_id = call.from_user.id
    product_id = int(call.data.split('_')[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    user_data[user_id]['current_product'] = product_id

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–Ω–∞–∑–∞–¥", "—É–¥–∞–ª–∏—Ç—å" –∏ "–∏–∑–º–µ–Ω–∏—Ç—å"
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
    delete_button = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data=f'delete_{product_id}')
    change_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º", callback_data=f'change_grams_{product_id}')
    keyboard.add(back_button, delete_button, change_button)

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º?', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'back' and call.from_user.id in user_data and user_data[call.from_user.id]['state'] == States.CHANGE_PRODUCT)
def handle_back_callback(call):
    user_id = call.from_user.id
    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    text = "–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
    for i, (product_id, product_data) in enumerate(user_data[user_id]['products'].items(), 1):
        text += f"{i}. {product_data['name']}, {product_data['calories']['Calories']} –∫–∫–∞–ª\n"

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ" –∏ "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    save_button = types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")
    add_more_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_more")
    change_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="change")
    keyboard.add(save_button, add_more_button, change_button)

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_') and call.from_user.id in user_data and user_data[call.from_user.id]['state'] == States.CHANGE_PRODUCT)
def handle_delete_product_callback(call):
    user_id = call.from_user.id
    product_id = int(call.data.split('_')[1])

    # —É–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
    del user_data[user_id]['products'][product_id]

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    text = "–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
    for i, (product_id, product_data) in enumerate(user_data[user_id]['products'].items(), 1):
        text += f"{i}. {product_data['name']}, {product_data['calories']} –∫–∫–∞–ª\n"

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ" –∏ "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    save_button = types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")
    add_more_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_more")
    change_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="change")
    keyboard.add(save_button, add_more_button, change_button)

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('change_grams_'))
def handle_change_grams_callback(call):
    user_id = call.from_user.id
    product_id = int(call.data.split('_')[2])

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å
    user_data[user_id]['current_product'] = product_id

    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –ø—Ä–æ–¥—É–∫—Ç–∞."
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text)
    user_data[user_id]['state'] = States.CHANGE_GRAMS


@bot.message_handler(func=lambda message: message.from_user.id in user_data and user_data[message.from_user.id]['state'] == States.CHANGE_GRAMS)
def handle_change_grams_input(message):
    user_id = message.from_user.id
    if message.text.isdigit():
        grams = int(message.text)
        product_id = user_data[user_id]['current_product']
        product = user_data[user_id]['products'][product_id]

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º
        calories = calculate_nutrients(user_data[user_id]['product_options'], product_id, grams)
        product['calories'] = calories

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        text = "–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        for i, (product_id, product_data) in enumerate(user_data[user_id]['products'].items(), 1):
            text += f"{i}. {product_data['name']}, {product_data['calories']} –∫–∫–∞–ª\n"

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ" –∏ "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        save_button = types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")
        add_more_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_more")
        change_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="change")
        keyboard.add(save_button, add_more_button, change_button)

        bot.send_message(user_id, text, reply_markup=keyboard)
        user_data[user_id]['state'] = States.PRODUCT_ACTIONS

